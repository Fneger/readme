[global]
fsid = c88b8363-16b4-480c-b9d2-6d6ae0b428c9
mon_initial_members = node0
mon_host = 192.168.1.12
auth_cluster_required = cephx
auth_service_required = cephx
auth_client_required = cephx
public_network = 192.168.1.0/24
cluster_network = 192.168.1.0/24


osd_journal_size = 10240			#osd日志大小MB
#osd_journal = /var/lib/ceph/osd/$cluster-$id/journal,默认路径
osd_pool_default_pg_num = 128
osd_pool_default_pgp_num = 128
osd_pool_default_size = 3
osd_pool_default_min_size = 2
osd_op_num_shards = 15
osd_client_message_size_cap = 1048576000
osd_client_message_cap = 1000
osd_scrub_begin_hour = 10
osd_scrub_end_hour = 5
osd_scrub_sleep = 1
osd_scrub_load_threshold = 8
osd_scrub_chunk_min = 5
osd_scrub_chunk_max = 25
osd_op_thread_timeout = 100                #默认值 15
osd_op_thread_suicide_timeout = 300        #默认值 150
osd_recovery_thread_timeout = 100          #默认值 30
osd_recovery_thread_suicide_timeout = 300  #默认值 300
filestore_op_threads = 5                   #默认值 2
filestore_op_thread_timeout = 100          #默认值 60
filestore_op_thread_suicide_timeout = 300  #默认值 180
filestore_merge_threshold = -1    #默认值 10
filestore_split_multiple = 10000  #默认值 2
filestore_fd_cache_shards =  32  #默认值 16     // FD number of shards
filestore_fd_cache_size = 32768  #默认值 128  // FD lru size
filestore_wbthrottle_enable = false   #默认值 true      SSD的时候建议关闭
filestore_min_sync_interval = 1       #默认值 0.01 s    最小同步间隔秒数，sync fs的数据到disk，FileStore::sync_entry()
filestore_max_sync_interval = 10      #默认值 5 s       最大同步间隔秒数，sync fs的数据到disk，FileStore::sync_entry()
filestore_commit_timeout = 1000       #默认值 600 s     FileStore::sync_entry() 里 new SyncEntryTimeout(m_filestore_commit_timeout)
filestore_expected_throughput_bytes =  536870912   #默认值 200MB    /// Expected filestore throughput in B/s
filestore_expected_throughput_ops = 2000           #默认值 200      /// Expected filestore throughput in ops/s
filestore_queue_max_bytes= 1048576000              #默认值 100MB
filestore_queue_max_ops = 5000                     #默认值 50
#/// Use above to inject delays intended to keep the op queue between low and high
filestore_queue_low_threshhold = 0.3               #默认值 0.3
filestore_queue_high_threshhold = 0.9              #默认值 0.9
filestore_queue_high_delay_multiple = 2            #默认值 0    /// Filestore high delay multiple.  Defaults to 0 (disabled)
filestore_queue_max_delay_multiple = 10            #默认值 0    /// Filestore max delay multiple.  Defaults to 0 (disabled)
filestore_ondisk_finisher_threads = 2 #默认值 1
filestore_apply_finisher_threads = 2  #默认值 1
journal_max_write_bytes=1048576000       #默认值 10M    
journal_max_write_entries=5000           #默认值 100
journal_throttle_high_multiple = 2       #默认值 0    /// Multiple over expected at high_threshhold. Defaults to 0 (disabled).
journal_throttle_max_multiple = 10       #默认值 0    /// Multiple over expected at max.  Defaults to 0 (disabled).

mon_osd_down_out_interval = 3600
mon_osd_min_down_reporters = 3
mon_osd_report_timeout = 900
osd_heartbeat_interval = 10
osd_heartbeat_grace = 60
mon_osd_full_ratio = .80 #存储使用率达到95%将不再提供数据存储
mon_osd_backfillfull_ratio = .75
mon_osd_nearfull_ratio = .70 #存储使用率达到70%集群将会warn状态
osd_deep_scrub_randomize_ratio = 0.01 #随机深度清洗概率,值越大，随机深度清洗概率越高,太高会影响业务
mon_data_avail_warn = 10 #/var/lib/ceph/mon/目录所剩空间所占比例，报警阀值
mon_allow_pool_delete = true

objecter_inflight_ops = 10240
objecter_inflight_op_bytes = 1048576000

[osd.0]
public_addr = 192.168.1.12  #{host-public-ip-address}
cluster_addr = 192.168.1.12  #{host-cluster-ip-address}


[client]
rbd_default_features = 1
rbd_cache_size = 134217728                  #默认值 32M // cache size in bytes
rbd_cache_max_dirty = 100663296             #默认值 24M // dirty limit in bytes - set to 0 for write-through caching
rbd_cache_target_dirty = 67108864           #默认值 16M // target dirty limit in bytes
rbd_cache_writethrough_until_flush = true   #默认值 true // whether to make writeback caching writethrough until flush is called, to be sure the user of librbd will send flushs so that writeback is safe
rbd_cache_max_dirty_age = 5                 #默认值 1.0  // seconds in cache before writeback starts
